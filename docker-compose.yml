services:
  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:7.0.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
    networks:
      - mynetwork

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:7.0.1
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - mynetwork
      
  kafdrop:
    image: obsidiandynamics/kafdrop
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKER_CONNECT: kafka:9092
    depends_on:
      - kafka
    networks:
      - mynetwork
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'
        
  api-gateway:
    container_name: api-gateway
    build:
      context: ./API_Gateway
      dockerfile: Dockerfile
    ports:
      - "8000:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    networks:
      - mynetwork
    depends_on:
      - authapi
      - clinicservice
      - doctorservice
      - patientservice
      - rdvservice
      - consultationservice
      - facturationservice
      - reportingservice
      - notificationservice
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'
  authapi:
    container_name: authapi
    image: ${DOCKER_REGISTRY-}authapi
    build:
      context: ./Services/AuthService
      dockerfile: Auth.API/Dockerfile
    ports:
      - "5001:8081"
      - "5002:8082"
    environment:
      ConnectionStrings__DefaultConnection: Server=host.docker.internal,1435;Database=UserDb;User Id=sa;Password=azerty@123456;Encrypt=False;TrustServerCertificate=True;
    # depends_on:
    #   - auth.database
    volumes:
      - dataprotection_keys:/app/keys
    networks:
      - mynetwork
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 384M
          cpus: '0.3'

  # auth.database:
  #   image: mcr.microsoft.com/mssql/server:2022-latest
  #   container_name: auth.database
  #   user: "0"
  #   environment:
  #     - ACCEPT_EULA=Y
  #     - MSSQL_SA_PASSWORD=${MSSQL_SA_PASSWORD}
  #     - MSSQL_PID=Express
  #     - MSSQL_MEMORY_LIMIT_MB=800
  #     - TZ=Europe/Paris
  #   command: >
  #     bash -c "mkdir -p /var/opt/mssql/data /var/opt/mssql/log /var/opt/mssql/backup &&
  #     chown -R mssql:mssql /var/opt/mssql &&
  #     /opt/mssql/bin/sqlservr"
  #   volumes:
  #     - sqlvolume_auth_data:/var/opt/mssql/data
  #     - sqlvolume_auth_log:/var/opt/mssql/log
  #     - sqlvolume_auth_backup:/var/opt/mssql/backup
  #   ports:
  #     - "1434:1433"
  #   networks:
  #     - mynetwork
  #   restart: unless-stopped


  clinicservice:
    container_name: clinicservice
    image: ${DOCKER_REGISTRY-}clinicapi
    build:
      context: ./Services/ClinicManagementService
      dockerfile: Clinic.API/Dockerfile
    ports:
      - "5003:8083"
      - "5004:8084" 
    environment:
      ConnectionStrings__DefaultConnection: Server=host.docker.internal,1435;Database=ClinicDb;User Id=sa;Password=azerty@123456;Encrypt=False;TrustServerCertificate=True;
    depends_on:
      - kafka
    # - clinic.database
    networks:
      - mynetwork
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 384M
          cpus: '0.3'

  # clinic.database:
  #   image: mcr.microsoft.com/mssql/server:2022-latest
  #   container_name: clinic.database
  #   environment:
  #     - ACCEPT_EULA=Y
  #     - MSSQL_SA_PASSWORD=${MSSQL_SA_PASSWORD}
  #     - MSSQL_PID=Express
  #   command: /opt/mssql/bin/sqlservr
  #   ports:
  #     - "1435:1433"
  #   networks:
  #     - mynetwork
  #   volumes:
  #     - sqlvolume_clinic:/var/opt/mssql
  #   restart: unless-stopped

  doctorservice:
    container_name: doctorservice
    image: ${DOCKER_REGISTRY-}doctorapi
    build:
      context: ./Services/DoctorManagementService
      dockerfile: Doctor.API/Dockerfile
    ports:
      - "5005:8085"
      - "5006:8086"
    environment:
      ConnectionStrings__DefaultConnection: Server=host.docker.internal,1435;Database=MedecinDb;User Id=sa;Password=azerty@123456;Encrypt=False;TrustServerCertificate=True;
    depends_on:
      - kafka
    # - doctor.database
    networks:
      - mynetwork
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 384M
          cpus: '0.3'

  # doctor.database:
  #   image: mcr.microsoft.com/mssql/server:2022-latest
  #   container_name: doctor.database
  #   environment:
  #     - ACCEPT_EULA=Y
  #     - MSSQL_SA_PASSWORD=${MSSQL_SA_PASSWORD}
  #     - MSSQL_PID=Express
  #   command: /opt/mssql/bin/sqlservr
  #   ports:
  #     - "1436:1433"
  #   networks:
  #     - mynetwork
  #   volumes:
  #     - sqlvolume_doctor:/var/opt/mssql
  #   restart: unless-stopped

  patientservice:
    container_name: patientservice
    image: ${DOCKER_REGISTRY-}patientapi
    build:
      context: ./Services/PatientManagementService
      dockerfile: PatientManagementService.API/Dockerfile
    ports:
      - "5007:8087"
      - "5008:8088"
    environment:
      ConnectionStrings__DefaultConnection: Server=host.docker.internal,1435;Database=PatientDb;User Id=sa;Password=azerty@123456;Encrypt=False;TrustServerCertificate=True;
    depends_on:
      - kafka
    # - patient.database
    networks:
      - mynetwork
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 384M
          cpus: '0.3'

  # patient.database:
  #   image: mcr.microsoft.com/mssql/server:2022-latest
  #   container_name: patient.database
  #   environment:
  #     - ACCEPT_EULA=Y
  #     - MSSQL_SA_PASSWORD=${MSSQL_SA_PASSWORD}
  #     - MSSQL_PID=Express
  #   command: /opt/mssql/bin/sqlservr
  #   ports:
  #     - "1437:1433"
  #   networks:
  #     - mynetwork
  #   volumes:
  #     - sqlvolume_patient:/var/opt/mssql
  #   restart: unless-stopped

  rdvservice:
    container_name: rdvservice
    image: ${DOCKER_REGISTRY-}rdvapi
    build:
      context: ./Services/RDVManagementService
      dockerfile: RDV.API/Dockerfile
    ports:
      - "5009:8089"
      - "5010:8090"
    environment:
      ConnectionStrings__DefaultConnection: Server=host.docker.internal,1435;Database=RDVDb;User Id=sa;Password=azerty@123456;Encrypt=False;TrustServerCertificate=True;
    depends_on:
      - kafka
    # - rdv.database
    networks:
      - mynetwork
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 384M
          cpus: '0.3'

  # rdv.database:
  #   image: mcr.microsoft.com/mssql/server:2022-latest
  #   container_name: rdv.database
  #   environment:
  #     - ACCEPT_EULA=Y
  #     - MSSQL_SA_PASSWORD=${MSSQL_SA_PASSWORD}
  #     - MSSQL_PID=Express
  #   command: /opt/mssql/bin/sqlservr
  #   ports:
  #     - "1438:1433"
  #   networks:
  #     - mynetwork
  #   volumes:
  #     - sqlvolume_rdv:/var/opt/mssql
  #   restart: unless-stopped

  consultationservice:
    container_name: consultationservice
    image: ${DOCKER_REGISTRY-}consultationapi
    build:
      context: ./Services/ConsultationManagementService
      dockerfile: ConsultationManagementService.API/Dockerfile
    ports:
      - "5011:8091"
      - "5012:8092"
    environment:
      ConnectionStrings__DefaultConnection: Server=host.docker.internal,1435;Database=ConsultationDb;User Id=sa;Password=azerty@123456;Encrypt=False;TrustServerCertificate=True;
    depends_on:
      - kafka
    # - consultation.database
    networks:
      - mynetwork
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 384M
          cpus: '0.3'
    volumes:
      - ./ConsultationManagementService.API/wwwroot/uploads:/app/wwwroot/uploads

  # consultation.database:
  #   image: mcr.microsoft.com/mssql/server:2022-latest
  #   container_name: consultation.database
  #   environment:
  #     - ACCEPT_EULA=Y
  #     - MSSQL_SA_PASSWORD=${MSSQL_SA_PASSWORD}
  #     - MSSQL_PID=Express
  #   command: /opt/mssql/bin/sqlservr
  #   ports:
  #     - "1439:1433"
  #   networks:
  #     - mynetwork
  #   volumes:
  #     - sqlvolume_consultation:/var/opt/mssql
  #   restart: unless-stopped

  facturationservice:
    container_name: facturationservice
    image: ${DOCKER_REGISTRY-}facturationapi
    build:
      context: ./Services/FacturationService
      dockerfile: Facturation.API/Dockerfile
    ports:
      - "5013:8093"
      - "5014:8094"
    environment:
      ConnectionStrings__DefaultConnection: Server=host.docker.internal,1435;Database=FactureDb;User Id=sa;Password=azerty@123456;Encrypt=False;TrustServerCertificate=True;
    depends_on:
      - kafka
    #- facturation.database
    networks:
      - mynetwork
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 384M
          cpus: '0.3'

  # facturation.database:
  #   image: mcr.microsoft.com/mssql/server:2022-latest
  #   container_name: facturation.database
  #   environment:
  #     - ACCEPT_EULA=Y
  #     - MSSQL_SA_PASSWORD=${MSSQL_SA_PASSWORD}
  #     - MSSQL_PID=Express
  #   command: /opt/mssql/bin/sqlservr
  #   ports:
  #     - "1440:1433"
  #   networks:
  #     - mynetwork
  #   volumes:
  #     - sqlvolume_facture:/var/opt/mssql
  #   restart: unless-stopped
  #   deploy:
  #     resources:
  #       limits:
  #         memory: 2G
  #         cpus: '0.8'

  reportingservice:
    container_name: reportingservice
    image: ${DOCKER_REGISTRY-}reportingapi
    build:
      context: ./Services/ReportingService
      dockerfile: Reporting.API/Dockerfile
    ports:
      - "5015:8095"
      - "5016:8096"
    networks:
      - mynetwork
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 384M
          cpus: '0.3'

  notificationservice:
    container_name: notificationservice
    image: ${DOCKER_REGISTRY-}notificationapi
    build:
      context: ./Services/NotificationService
      dockerfile: Notif.API/Dockerfile
    ports:
      - "5017:8097"
      - "5018:8098"
    environment:
      ConnectionStrings__DefaultConnection: Server=host.docker.internal,1435;Database=NotificationDb;User Id=sa;Password=azerty@123456;Encrypt=False;TrustServerCertificate=True;
    depends_on:
      #- notification.database
      - kafka
      - doctorservice
      - patientservice
    networks:
      - mynetwork
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 384M
          cpus: '0.3'

# notification.database:
#   image: mcr.microsoft.com/mssql/server:2022-latest
#   container_name: notification.database
#   environment:
#     - ACCEPT_EULA=Y
#     - MSSQL_SA_PASSWORD=${MSSQL_SA_PASSWORD}
#     - MSSQL_PID=Express
#   command: /opt/mssql/bin/sqlservr
#   ports:
#     - "1441:1433"      
#   networks:
#     - mynetwork
#   volumes:
#     - sqlvolume_notification:/var/opt/mssql
#   restart: unless-stopped
#   deploy:
#     resources:
#       limits:
#         memory: 1G
#         cpus: '0.7'

  frontend:
    container_name: frontend
    build:
      context: ./Frontend      
      dockerfile: Dockerfile
    ports:
      - "8080:80"            
    environment:
      REACT_APP_API_GATEWAY_URL: http://host.docker.internal:8000
    networks:
      - mynetwork
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'


volumes:
  kafka-data:
  dataprotection_keys:
  sqlvolume_auth_data:
  sqlvolume_auth_log:
  sqlvolume_auth_backup:
  sqlvolume_clinic:
  sqlvolume_doctor:
  sqlvolume_patient:
  sqlvolume_rdv:
  sqlvolume_consultation:
  sqlvolume_facture:
  sqlvolume_notification:

networks:
  mynetwork:
    driver: bridge
